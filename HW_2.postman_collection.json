{
	"info": {
		"_postman_id": "82cc7e1f-9379-4663-ba62-df7bc9bb1f39",
		"name": "Group_29_Natallia_Burmaka_HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20765137"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Статус код 200\r",
							"pm.environment.get(\"variable_key\");\r",
							"\r",
							"pm.test(\"Verify that status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//2. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Check Body\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5007/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"// 7. Спарсить request.\r",
							"let req = request.data;\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Check parameter start_qa_salary\", function () {\r",
							"pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check parameter qa_salary_after_6_months\", function () {\r",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check parameter qa_salary_after_12_months\", function () {\r",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check parameter qa_salary_after_1.5_year\", function () {\r",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check parameter qa_salary_after_3.5_years\", function () {\r",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check parameter person\", function () {\r",
							"pm.expect(jsonData).to.have.property(\"person\");\r",
							"});\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check start_qa_salary = salary\", function () {\r",
							"pm.expect(jsonData.start_qa_salary).to.deep.eql(+req.salary);\r",
							"});\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_6_months = salary*2\", function () {\r",
							"pm.expect(jsonData.qa_salary_after_6_months).to.deep.eql(+req.salary*2);\r",
							"});\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_12_months = salary*2.7\", function () {\r",
							"pm.expect(jsonData.qa_salary_after_12_months).to.deep.eql(+req.salary*2.7);\r",
							"});\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"let Json_aray = Object.values(jsonData)\r",
							"pm.test(\"Check qa_salary_after_1.5_year = salary*3.3\", function () {\r",
							"pm.expect(Json_aray[1]).to.deep.eql(+req.salary*3.3);\r",
							"});\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_3.5_years = salary*3.8\", function () {\r",
							"pm.expect(Json_aray[3]).to.deep.eql(+req.salary*3.8);\r",
							"});\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check parameter_1 person has salary from req\", function () {\r",
							"pm.expect(+jsonData.person.u_name[1]).to.eql(+req.salary);\r",
							"});\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Check parameter u_age = age from req\", function () {\r",
							"pm.expect(+jsonData.person.u_age).to.eql(+req.age);\r",
							"});\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Check parameter u_salary_5_years = salary*4.2\", function () {\r",
							"pm.expect(Json_aray[0].u_salary_5_years).to.deep.eql(+req.salary*4.2);\r",
							"});\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (let i in jsonData.person)\r",
							"console.log(i,jsonData.person[i]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Anna",
							"type": "text"
						},
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Anna",
							"disabled": true
						},
						{
							"key": "age",
							"value": "25",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "2500",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//3. Спарсить response body в JSON\r",
							"let jsonData = pm.response.json();\r",
							"//4. Проверить, что name в ответе равно name s request(вбить руками)\r",
							"let resp_name = jsonData.name\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(resp_name).to.eql(\"Anna\");\r",
							"});\r",
							"//5. Проверить, что age в ответе равно age s request(вбить руками)\r",
							"let resp_age = jsonData.age\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(resp_age).to.eql(\"25\");\r",
							"});\r",
							"//6. Проверить, что salary в ответе равно salary s request(вбить руками)\r",
							"let resp_salary = jsonData.salary\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(resp_salary).to.eql(2500);\r",
							"});\r",
							"//7. Cпарсить request\r",
							"let req = request.data;\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req.name\r",
							"pm.test(\"Check req_name\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let req_age = req.age\r",
							"pm.test(\"Check req_age\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let req_salary = req.salary\r",
							"pm.test(\"Check req_salary\", function () {\r",
							"    pm.expect(resp_salary).to.eql(req_salary);\r",
							"});\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let u_salary_1_5_year = jsonData.family.u_salary_1_5_year\r",
							"pm.test(\"Check u_salary_1_5_year\", function () {\r",
							"    pm.expect(u_salary_1_5_year).to.eql(req_salary*4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Anna",
							"type": "text"
						},
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Anna",
							"disabled": true
						},
						{
							"key": "age",
							"value": "25",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "2500",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"//4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject()\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req.name\r",
							"let resp_name = jsonData.name\r",
							"pm.test(\"Name check\", function () {\r",
							"pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let req_age = req.age\r",
							"let resp_age = jsonData.age\r",
							"pm.test(\"Age check\", function () {\r",
							"pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let req_salary = req.salary\r",
							"let salary_number = Number(req_salary)\r",
							"let resp_salary = jsonData.salary\r",
							"pm.test(\"Salary check\", function () {\r",
							"pm.expect(resp_salary).to.eql(salary_number);\r",
							"});\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog has name check\", function () {\r",
							"pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"//10. Проверить, что у параметра dog есть параметры age\r",
							"pm.test(\"Dog has age check\", function () {\r",
							"pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"let dog_name = jsonData.family.pets.dog.name\r",
							"pm.test(\"Dog's name is Luky\", function () {\r",
							"pm.expect(dog_name).to.eql(\"Luky\");\r",
							"});\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"let dog_age = jsonData.family.pets.dog.age\r",
							"pm.test(\"Dog's age is 4\", function () {\r",
							"pm.expect(dog_age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_3?name=Anna&age=25&salary=2500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Anna"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "2500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"//4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject()\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req.name\r",
							"let resp_name = jsonData.name\r",
							"pm.test(\"Name check\", function () {\r",
							"pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"let req_age = req.age\r",
							"let age_number = Number(req_age)\r",
							"let resp_age = jsonData.age\r",
							"pm.test(\"Age check\", function () {\r",
							"pm.expect(resp_age).to.eql(age_number);\r",
							"});\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(req.salary)\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary)\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[0])\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[1])\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[2])\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Salary 0 check\", function () {\r",
							"pm.expect(+jsonData.salary[0]).to.eql(+req.salary);\r",
							"});\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Salary 1 check\", function () {\r",
							"pm.expect(+jsonData.salary[1]).to.eql(+req.salary*2);\r",
							"});\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Salary 2 check\", function () {\r",
							"pm.expect(+jsonData.salary[2]).to.eql(+req.salary*3);\r",
							"});\r",
							"//15. Создать в окружении переменную name\r",
							"//16. Создать в окружении переменную age\r",
							"//17. Создать в окружении переменную salary\r",
							"//18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", \"Anna\");\r",
							"//19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", \"25\");\r",
							"//20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", \"2500\");\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"jsonData.salary.forEach(element => console.log(element));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_4?name=Anna&age=25&salary=2500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Anna"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "2500"
						}
					]
				}
			},
			"response": []
		}
	]
}
